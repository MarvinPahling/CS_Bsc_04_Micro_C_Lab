   1              		.cpu arm7tdmi
   2              		.arch armv4t
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"aic.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "./lib/aic.c"
  18              		.global	aic_intNest
  19              		.bss
  22              	aic_intNest:
  23 0000 00       		.space	1
  24              		.global	aic_intMax
  27              	aic_intMax:
  28 0001 00       		.space	1
  29              		.global	aic
  30 0002 0000     		.align	2
  33              	aic:
  34 0004 00000000 		.space	12
  34      00000000 
  34      00000000 
  35              		.section	.rodata
  36              		.align	2
  37              	.LC0:
  38 0000 1B5B3331 		.ascii	"\033[31m!!!!!! \000"
  38      6D212121 
  38      21212120 
  38      00
  39 000d 000000   		.align	2
  40              	.LC1:
  41 0010 2050433D 		.ascii	" PC=\000"
  41      00
  42 0015 000000   		.align	2
  43              	.LC2:
  44 0018 20535749 		.ascii	" SWI=\000"
  44      3D00
  45              		.section	.text.Q_onAssert,"ax",%progbits
  46              		.align	2
  47              		.global	Q_onAssert
  48              		.syntax unified
  49              		.arm
  51              	Q_onAssert:
  52              	.LFB2:
   1:./lib/aic.c   **** /* Driver for the AT91SAM7's Advanced Interrupt Controller (AIC).
   2:./lib/aic.c   ****  *
   3:./lib/aic.c   ****  * The AIC is responsible for queuing interrupts from other
   4:./lib/aic.c   ****  * peripherals on the board. It then hands them one by one to the ARM
   5:./lib/aic.c   ****  * CPU core for handling, according to each peripheral's configured
   6:./lib/aic.c   ****  * priority.
   7:./lib/aic.c   ****  */
   8:./lib/aic.c   **** 
   9:./lib/aic.c   **** #include <stdlib.h>    //fuer NULL
  10:./lib/aic.c   **** 
  11:./lib/aic.c   **** #include "../AT91SAM7S64.h"
  12:./lib/aic.c   **** #include "term.h"
  13:./lib/aic.c   **** #include "aic.h"
  14:./lib/aic.c   **** #include "../main.h"   //fuer VT100_VORDERGRUND_ROT
  15:./lib/aic.c   **** 
  16:./lib/aic.c   **** uint8_t aic_intNest =0;  /* start with nesting level of 0 */
  17:./lib/aic.c   **** uint8_t aic_intMax  =0;  /* Max nexting int */
  18:./lib/aic.c   **** 
  19:./lib/aic.c   **** /* static */ struct {
  20:./lib/aic.c   **** 	void        *sys_vl_head;
  21:./lib/aic.c   **** 	aic_cb_fcn   commxx_cb;
  22:./lib/aic.c   **** 	uint16_t     spurious_cnt;
  23:./lib/aic.c   **** } aic;
  24:./lib/aic.c   **** 
  25:./lib/aic.c   **** 
  26:./lib/aic.c   **** void __attribute__((noreturn)) Q_onAssert(char const * const file, uint32_t addr,int32_t swi_nr) 
  27:./lib/aic.c   **** {
  53              		.loc 1 27 1
  54              		.cfi_startproc
  55              		@ Function supports interworking.
  56              		@ args = 0, pretend = 0, frame = 16
  57              		@ frame_needed = 1, uses_anonymous_args = 0
  58 0000 00482DE9 		push	{fp, lr}
  59              		.cfi_def_cfa_offset 8
  60              		.cfi_offset 11, -8
  61              		.cfi_offset 14, -4
  62 0004 04B08DE2 		add	fp, sp, #4
  63              		.cfi_def_cfa 11, 4
  64 0008 10D04DE2 		sub	sp, sp, #16
  65 000c 08000BE5 		str	r0, [fp, #-8]
  66 0010 0C100BE5 		str	r1, [fp, #-12]
  67 0014 10200BE5 		str	r2, [fp, #-16]
  28:./lib/aic.c   **** #if defined(MODE_RAM) || defined(MODE_SIM) 
  29:./lib/aic.c   **** 	interrupts_enable();  //Senderoutine benötigt IRQ, welche andernfalls deaktiviert ist!
  68              		.loc 1 29 2
  69 0018 A0309FE5 		ldr	r3, .L4
  70 001c 0FE0A0E1 		mov	lr, pc
  71 0020 13FF2FE1 		bx	r3
  72              	.LVL0:
  30:./lib/aic.c   **** #endif	
  31:./lib/aic.c   **** 	(void)term_string(VT100_VORDERGRUND_ROT "!!!!!! ",ASYNCSYNC_BLOCK);
  73              		.loc 1 31 8
  74 0024 0110A0E3 		mov	r1, #1
  75 0028 94009FE5 		ldr	r0, .L4+4
  76 002c 94309FE5 		ldr	r3, .L4+8
  77 0030 0FE0A0E1 		mov	lr, pc
  78 0034 13FF2FE1 		bx	r3
  79              	.LVL1:
  32:./lib/aic.c   **** 	(void)term_string(file,ASYNCSYNC_BLOCK);
  80              		.loc 1 32 8
  81 0038 0110A0E3 		mov	r1, #1
  82 003c 08001BE5 		ldr	r0, [fp, #-8]
  83 0040 80309FE5 		ldr	r3, .L4+8
  84 0044 0FE0A0E1 		mov	lr, pc
  85 0048 13FF2FE1 		bx	r3
  86              	.LVL2:
  33:./lib/aic.c   **** 	(void)term_string(" PC=",ASYNCSYNC_BLOCK);
  87              		.loc 1 33 8
  88 004c 0110A0E3 		mov	r1, #1
  89 0050 74009FE5 		ldr	r0, .L4+12
  90 0054 6C309FE5 		ldr	r3, .L4+8
  91 0058 0FE0A0E1 		mov	lr, pc
  92 005c 13FF2FE1 		bx	r3
  93              	.LVL3:
  34:./lib/aic.c   **** 	(void)term_hex(addr,8,ASYNCSYNC_BLOCK);
  94              		.loc 1 34 8
  95 0060 0120A0E3 		mov	r2, #1
  96 0064 0810A0E3 		mov	r1, #8
  97 0068 0C001BE5 		ldr	r0, [fp, #-12]
  98 006c 5C309FE5 		ldr	r3, .L4+16
  99 0070 0FE0A0E1 		mov	lr, pc
 100 0074 13FF2FE1 		bx	r3
 101              	.LVL4:
  35:./lib/aic.c   **** 	if(swi_nr != -1) {
 102              		.loc 1 35 4
 103 0078 10301BE5 		ldr	r3, [fp, #-16]
 104 007c 010073E3 		cmn	r3, #1
 105 0080 0C00000A 		beq	.L3
  36:./lib/aic.c   **** 		(void)term_string(" SWI=",ASYNCSYNC_BLOCK);
 106              		.loc 1 36 9
 107 0084 0110A0E3 		mov	r1, #1
 108 0088 44009FE5 		ldr	r0, .L4+20
 109 008c 34309FE5 		ldr	r3, .L4+8
 110 0090 0FE0A0E1 		mov	lr, pc
 111 0094 13FF2FE1 		bx	r3
 112              	.LVL5:
  37:./lib/aic.c   **** 		(void)term_hex(swi_nr,4,ASYNCSYNC_BLOCK);
 113              		.loc 1 37 9
 114 0098 10301BE5 		ldr	r3, [fp, #-16]
 115 009c 0120A0E3 		mov	r2, #1
 116 00a0 0410A0E3 		mov	r1, #4
 117 00a4 0300A0E1 		mov	r0, r3
 118 00a8 20309FE5 		ldr	r3, .L4+16
 119 00ac 0FE0A0E1 		mov	lr, pc
 120 00b0 13FF2FE1 		bx	r3
 121              	.LVL6:
  38:./lib/aic.c   **** 	}
  39:./lib/aic.c   **** 	//__builtin_trap();  //nur bei TrOnchip.undef
  40:./lib/aic.c   ****     while(1);
 122              		.loc 1 40 10
 123 00b4 0000A0E1 		nop
 124              	.L3:
 125 00b8 0000A0E1 		nop
 126 00bc FDFFFFEA 		b	.L3
 127              	.L5:
 128              		.align	2
 129              	.L4:
 130 00c0 00000000 		.word	interrupts_enable
 131 00c4 00000000 		.word	.LC0
 132 00c8 00000000 		.word	term_string
 133 00cc 10000000 		.word	.LC1
 134 00d0 00000000 		.word	term_hex
 135 00d4 18000000 		.word	.LC2
 136              		.cfi_endproc
 137              	.LFE2:
 139              		.section	.rodata
 140 001e 0000     		.align	2
 141              	.LC3:
 142 0020 4149432D 		.ascii	"AIC-IRQ nicht zugeordnet\000"
 142      49525120 
 142      6E696368 
 142      74207A75 
 142      67656F72 
 143              		.section	.text.default_isr,"ax",%progbits
 144              		.align	2
 145              		.weak	default_isr
 146              		.syntax unified
 147              		.arm
 149              	default_isr:
 150              	.LFB3:
  41:./lib/aic.c   **** }
  42:./lib/aic.c   **** 
  43:./lib/aic.c   **** /* Default handler für nicht registierten IRQ-Interrupt */
  44:./lib/aic.c   **** void  __attribute__((weak,noreturn)) default_isr(void)
  45:./lib/aic.c   **** {
 151              		.loc 1 45 1
 152              		.cfi_startproc
 153              		@ Function supports interworking.
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156 0000 00482DE9 		push	{fp, lr}
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 11, -8
 159              		.cfi_offset 14, -4
 160 0004 04B08DE2 		add	fp, sp, #4
 161              		.cfi_def_cfa 11, 4
  46:./lib/aic.c   **** #if defined(MODE_RAM) || defined(MODE_SIM) 
  47:./lib/aic.c   **** 	interrupts_enable();  //Senderoutine benötigt IRQ, der andernfalls deaktiviert ist!
 162              		.loc 1 47 2
 163 0008 20309FE5 		ldr	r3, .L8
 164 000c 0FE0A0E1 		mov	lr, pc
 165 0010 13FF2FE1 		bx	r3
 166              	.LVL7:
  48:./lib/aic.c   **** #endif	
  49:./lib/aic.c   **** 	(void)term_string("AIC-IRQ nicht zugeordnet",ASYNCSYNC_BLOCK);
 167              		.loc 1 49 8
 168 0014 0110A0E3 		mov	r1, #1
 169 0018 14009FE5 		ldr	r0, .L8+4
 170 001c 14309FE5 		ldr	r3, .L8+8
 171 0020 0FE0A0E1 		mov	lr, pc
 172 0024 13FF2FE1 		bx	r3
 173              	.LVL8:
 174              	.L7:
  50:./lib/aic.c   **** 	while(1);
 175              		.loc 1 50 7
 176 0028 0000A0E1 		nop
 177 002c FDFFFFEA 		b	.L7
 178              	.L9:
 179              		.align	2
 180              	.L8:
 181 0030 00000000 		.word	interrupts_enable
 182 0034 20000000 		.word	.LC3
 183 0038 00000000 		.word	term_string
 184              		.cfi_endproc
 185              	.LFE3:
 187              		.section	.rodata
 188 0039 000000   		.align	2
 189              	.LC4:
 190 003c 4149432D 		.ascii	"AIC-FIQ-IRQ nicht zugeordnet\000"
 190      4649512D 
 190      49525120 
 190      6E696368 
 190      74207A75 
 191              		.section	.text.default_fiq,"ax",%progbits
 192              		.align	2
 193              		.weak	default_fiq
 194              		.syntax unified
 195              		.arm
 197              	default_fiq:
 198              	.LFB4:
  51:./lib/aic.c   **** }
  52:./lib/aic.c   **** 
  53:./lib/aic.c   **** /* Default handler für nicht registierten FIQ-Interrupt */
  54:./lib/aic.c   **** void  __attribute__((weak,noreturn)) default_fiq(void)
  55:./lib/aic.c   **** {
 199              		.loc 1 55 1
 200              		.cfi_startproc
 201              		@ Function supports interworking.
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204 0000 00482DE9 		push	{fp, lr}
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 11, -8
 207              		.cfi_offset 14, -4
 208 0004 04B08DE2 		add	fp, sp, #4
 209              		.cfi_def_cfa 11, 4
  56:./lib/aic.c   **** #if defined(MODE_RAM) || defined(MODE_SIM) 
  57:./lib/aic.c   **** 	interrupts_enable();  //Senderoutine benötigt IRQ, der andernfalls deaktiviert ist!
 210              		.loc 1 57 2
 211 0008 20309FE5 		ldr	r3, .L12
 212 000c 0FE0A0E1 		mov	lr, pc
 213 0010 13FF2FE1 		bx	r3
 214              	.LVL9:
  58:./lib/aic.c   **** #endif	
  59:./lib/aic.c   **** 	(void)term_string("AIC-FIQ-IRQ nicht zugeordnet",ASYNCSYNC_BLOCK);
 215              		.loc 1 59 8
 216 0014 0110A0E3 		mov	r1, #1
 217 0018 14009FE5 		ldr	r0, .L12+4
 218 001c 14309FE5 		ldr	r3, .L12+8
 219 0020 0FE0A0E1 		mov	lr, pc
 220 0024 13FF2FE1 		bx	r3
 221              	.LVL10:
 222              	.L11:
  60:./lib/aic.c   **** 	while(1);
 223              		.loc 1 60 7
 224 0028 0000A0E1 		nop
 225 002c FDFFFFEA 		b	.L11
 226              	.L13:
 227              		.align	2
 228              	.L12:
 229 0030 00000000 		.word	interrupts_enable
 230 0034 3C000000 		.word	.LC4
 231 0038 00000000 		.word	term_string
 232              		.cfi_endproc
 233              	.LFE4:
 235              		.section	.text.spurious_isr,"ax",%progbits
 236              		.align	2
 237              		.weak	spurious_isr
 238              		.syntax unified
 239              		.arm
 241              	spurious_isr:
 242              	.LFB5:
  61:./lib/aic.c   **** }
  62:./lib/aic.c   **** 
  63:./lib/aic.c   **** /* Default handler IRQ, für bspw. Level-Aktive IRQ, die zum Eintritt in die ISR
  64:./lib/aic.c   ****    geführt haben, zum Zeitpunkt der 'Ursachenauswertung' aber nicht mehr aktiv sind */
  65:./lib/aic.c   **** void  __attribute__((weak /*,noreturn*/)) spurious_isr(void)
  66:./lib/aic.c   **** {
 243              		.loc 1 66 1
 244              		.cfi_startproc
 245              		@ Function supports interworking.
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 1, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 249 0000 04B02DE5 		str	fp, [sp, #-4]!
 250              		.cfi_def_cfa_offset 4
 251              		.cfi_offset 11, -4
 252 0004 00B08DE2 		add	fp, sp, #0
 253              		.cfi_def_cfa_register 11
  67:./lib/aic.c   **** #if 0
  68:./lib/aic.c   **** #if defined(MODE_RAM) || defined(MODE_SIM) 
  69:./lib/aic.c   **** 	interrupts_enable();  //Senderoutine benötigt IRQ, der andernfalls deaktiviert ist!
  70:./lib/aic.c   **** #endif	
  71:./lib/aic.c   **** 	(void)term_string("SPURIOUS-IRQ nicht zugeordnet",ASYNCSYNC_BLOCK);
  72:./lib/aic.c   **** #else
  73:./lib/aic.c   **** 	aic.spurious_cnt++;
 254              		.loc 1 73 5
 255 0008 24309FE5 		ldr	r3, .L15
 256 000c B830D3E1 		ldrh	r3, [r3, #8]
 257              		.loc 1 73 18
 258 0010 013083E2 		add	r3, r3, #1
 259 0014 0338A0E1 		lsl	r3, r3, #16
 260 0018 2338A0E1 		lsr	r3, r3, #16
 261 001c 10209FE5 		ldr	r2, .L15
 262 0020 B830C2E1 		strh	r3, [r2, #8]	@ movhi
  74:./lib/aic.c   **** #endif	
  75:./lib/aic.c   **** }
 263              		.loc 1 75 1
 264 0024 0000A0E1 		nop
 265 0028 00D08BE2 		add	sp, fp, #0
 266              		.cfi_def_cfa_register 13
 267              		@ sp needed
 268 002c 04B09DE4 		ldr	fp, [sp], #4
 269              		.cfi_restore 11
 270              		.cfi_def_cfa_offset 0
 271 0030 1EFF2FE1 		bx	lr
 272              	.L16:
 273              		.align	2
 274              	.L15:
 275 0034 00000000 		.word	aic
 276              		.cfi_endproc
 277              	.LFE5:
 279              		.section	.text.aic_init,"ax",%progbits
 280              		.align	2
 281              		.global	aic_init
 282              		.syntax unified
 283              		.arm
 285              	aic_init:
 286              	.LFB6:
  76:./lib/aic.c   **** 
  77:./lib/aic.c   **** void aic_init(void)
  78:./lib/aic.c   **** {
 287              		.loc 1 78 1
 288              		.cfi_startproc
 289              		@ Function supports interworking.
 290              		@ args = 0, pretend = 0, frame = 8
 291              		@ frame_needed = 1, uses_anonymous_args = 0
 292 0000 00482DE9 		push	{fp, lr}
 293              		.cfi_def_cfa_offset 8
 294              		.cfi_offset 11, -8
 295              		.cfi_offset 14, -4
 296 0004 04B08DE2 		add	fp, sp, #4
 297              		.cfi_def_cfa 11, 4
 298 0008 08D04DE2 		sub	sp, sp, #8
  79:./lib/aic.c   **** 	aic.commxx_cb    = NULL;
 299              		.loc 1 79 19
 300 000c 40319FE5 		ldr	r3, .L22
 301 0010 0020A0E3 		mov	r2, #0
 302 0014 042083E5 		str	r2, [r3, #4]
  80:./lib/aic.c   **** 	aic.spurious_cnt = 0;
 303              		.loc 1 80 19
 304 0018 34319FE5 		ldr	r3, .L22
 305 001c 0020A0E3 		mov	r2, #0
 306 0020 B820C3E1 		strh	r2, [r3, #8]	@ movhi
  81:./lib/aic.c   **** 	aic.sys_vl_head  = NULL;
 307              		.loc 1 81 19
 308 0024 28319FE5 		ldr	r3, .L22
 309 0028 0020A0E3 		mov	r2, #0
 310 002c 002083E5 		str	r2, [r3]
  82:./lib/aic.c   **** 	
  83:./lib/aic.c   **** 	interrupts_get_and_disable();
 311              		.loc 1 83 2
 312 0030 20319FE5 		ldr	r3, .L22+4
 313 0034 0FE0A0E1 		mov	lr, pc
 314 0038 13FF2FE1 		bx	r3
 315              	.LVL11:
  84:./lib/aic.c   **** 
  85:./lib/aic.c   **** 	extern uint32_t ivt_app[2][8];  //Wird wahlweise über link.ld oder startup.s gesezt
  86:./lib/aic.c   **** 	                                //Zeigt auf die Startadresse der IVT, welche zur 
  87:./lib/aic.c   **** 	                                //Laufzeit beschrieben werden kann
  88:./lib/aic.c   **** 
  89:./lib/aic.c   **** 	/* In die vom low_level_init() vorgefertigte Sprungtabelle die endgültigen Ziele eintragen */
  90:./lib/aic.c   **** 	//ivt_app[1][0] = (uint32_t)_reset;  //Bereits gesetzt
  91:./lib/aic.c   **** 	ivt_app[1][1] = (uint32_t)&isr_undef;
 316              		.loc 1 91 18
 317 003c 18219FE5 		ldr	r2, .L22+8
 318              		.loc 1 91 16
 319 0040 18319FE5 		ldr	r3, .L22+12
 320 0044 242083E5 		str	r2, [r3, #36]
  92:./lib/aic.c   ****     ivt_app[1][2] = (uint32_t)&isr_swi;
 321              		.loc 1 92 21
 322 0048 14219FE5 		ldr	r2, .L22+16
 323              		.loc 1 92 19
 324 004c 0C319FE5 		ldr	r3, .L22+12
 325 0050 282083E5 		str	r2, [r3, #40]
  93:./lib/aic.c   ****     ivt_app[1][3] = (uint32_t)&isr_pAbort;
 326              		.loc 1 93 21
 327 0054 0C219FE5 		ldr	r2, .L22+20
 328              		.loc 1 93 19
 329 0058 00319FE5 		ldr	r3, .L22+12
 330 005c 2C2083E5 		str	r2, [r3, #44]
  94:./lib/aic.c   ****     ivt_app[1][4] = (uint32_t)&isr_dAbort;
 331              		.loc 1 94 21
 332 0060 04219FE5 		ldr	r2, .L22+24
 333              		.loc 1 94 19
 334 0064 F4309FE5 		ldr	r3, .L22+12
 335 0068 302083E5 		str	r2, [r3, #48]
  95:./lib/aic.c   ****     //ivt_app[1][5] =                    //Reserved
  96:./lib/aic.c   ****     ivt_app[1][6] = (uint32_t)&isr_irq;
 336              		.loc 1 96 21
 337 006c FC209FE5 		ldr	r2, .L22+28
 338              		.loc 1 96 19
 339 0070 E8309FE5 		ldr	r3, .L22+12
 340 0074 382083E5 		str	r2, [r3, #56]
  97:./lib/aic.c   ****     ivt_app[1][7] = (uint32_t)&isr_fiq;
 341              		.loc 1 97 21
 342 0078 F4209FE5 		ldr	r2, .L22+32
 343              		.loc 1 97 19
 344 007c DC309FE5 		ldr	r3, .L22+12
 345 0080 3C2083E5 		str	r2, [r3, #60]
  98:./lib/aic.c   **** 
  99:./lib/aic.c   **** 	/* If we're coming from a warm boot, the AIC may be in a weird state.
 100:./lib/aic.c   **** 	 * Do some cleaning up to bring the AIC back into a known state:
 101:./lib/aic.c   **** 	 *  - All interrupt lines disabled,
 102:./lib/aic.c   **** 	 *  - No interrupt lines handled by the FIQ handler,
 103:./lib/aic.c   **** 	 *  - No pending interrupts,
 104:./lib/aic.c   **** 	 *  - AIC idle, not handling an interrupt.
 105:./lib/aic.c   **** 	*/
 106:./lib/aic.c   **** 	AT91C_BASE_AIC->AIC_IDCR = 0xFFFFFFFF;    /* disable all interrupts */
 346              		.loc 1 106 16
 347 0084 EC309FE5 		ldr	r3, .L22+36
 348              		.loc 1 106 27
 349 0088 0020E0E3 		mvn	r2, #0
 350 008c 242183E5 		str	r2, [r3, #292]
 107:./lib/aic.c   **** 	AT91C_BASE_AIC->AIC_FFDR = 0xFFFFFFFF;    /* disable fast forcing */
 351              		.loc 1 107 16
 352 0090 E0309FE5 		ldr	r3, .L22+36
 353              		.loc 1 107 27
 354 0094 0020E0E3 		mvn	r2, #0
 355 0098 442183E5 		str	r2, [r3, #324]
 108:./lib/aic.c   **** 	AT91C_BASE_AIC->AIC_ICCR = 0xFFFFFFFF;    /* clear all interrupts */
 356              		.loc 1 108 16
 357 009c D4309FE5 		ldr	r3, .L22+36
 358              		.loc 1 108 27
 359 00a0 0020E0E3 		mvn	r2, #0
 360 00a4 282183E5 		str	r2, [r3, #296]
 361              	.LBB2:
 109:./lib/aic.c   **** 	//AT91C_BASE_AIC->AIC_EOICR = 1;
 110:./lib/aic.c   **** 	for(int i = 0; i < 8; ++i) {
 362              		.loc 1 110 10
 363 00a8 0030A0E3 		mov	r3, #0
 364 00ac 08300BE5 		str	r3, [fp, #-8]
 365              		.loc 1 110 2
 366 00b0 050000EA 		b	.L18
 367              	.L19:
 111:./lib/aic.c   **** 		AT91C_BASE_AIC->AIC_EOICR = 0;        /* write AIC_EOICR 8 times */
 368              		.loc 1 111 17
 369 00b4 BC309FE5 		ldr	r3, .L22+36
 370              		.loc 1 111 29
 371 00b8 0020A0E3 		mov	r2, #0
 372 00bc 302183E5 		str	r2, [r3, #304]
 110:./lib/aic.c   **** 		AT91C_BASE_AIC->AIC_EOICR = 0;        /* write AIC_EOICR 8 times */
 373              		.loc 1 110 24 discriminator 3
 374 00c0 08301BE5 		ldr	r3, [fp, #-8]
 375 00c4 013083E2 		add	r3, r3, #1
 376 00c8 08300BE5 		str	r3, [fp, #-8]
 377              	.L18:
 110:./lib/aic.c   **** 		AT91C_BASE_AIC->AIC_EOICR = 0;        /* write AIC_EOICR 8 times */
 378              		.loc 1 110 19 discriminator 1
 379 00cc 08301BE5 		ldr	r3, [fp, #-8]
 380 00d0 070053E3 		cmp	r3, #7
 381 00d4 F6FFFFDA 		ble	.L19
 382              	.LBE2:
 112:./lib/aic.c   **** 	}
 113:./lib/aic.c   **** 
 114:./lib/aic.c   **** 	/* Enable debug protection. This is necessary for JTAG debugging, so
 115:./lib/aic.c   **** 	 * that the hardware debugger can read AIC registers without
 116:./lib/aic.c   **** 	 * triggering side-effects.
 117:./lib/aic.c   **** 	 * Inside ISR write after read of aic_ivr is now necessary!
 118:./lib/aic.c   **** 	*/
 119:./lib/aic.c   **** 	AT91C_BASE_AIC->AIC_DCR = AT91C_AIC_DCR_PROT;
 383              		.loc 1 119 16
 384 00d8 98309FE5 		ldr	r3, .L22+36
 385              		.loc 1 119 26
 386 00dc 0120A0E3 		mov	r2, #1
 387 00e0 382183E5 		str	r2, [r3, #312]
 388              	.LBB3:
 120:./lib/aic.c   **** 
 121:./lib/aic.c   **** 	/* Set default handlers for all interrupt lines. */
 122:./lib/aic.c   **** 	for(int i = 0; i < 32; i++) {
 389              		.loc 1 122 10
 390 00e4 0030A0E3 		mov	r3, #0
 391 00e8 0C300BE5 		str	r3, [fp, #-12]
 392              		.loc 1 122 2
 393 00ec 0B0000EA 		b	.L20
 394              	.L21:
 123:./lib/aic.c   **** 		AT91C_BASE_AIC->AIC_SMR[i] = AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | AIC_INT_LEVEL_LOWEST;
 395              		.loc 1 123 17
 396 00f0 80209FE5 		ldr	r2, .L22+36
 397              		.loc 1 123 30
 398 00f4 0C301BE5 		ldr	r3, [fp, #-12]
 399 00f8 0010A0E3 		mov	r1, #0
 400 00fc 031182E7 		str	r1, [r2, r3, lsl #2]
 124:./lib/aic.c   **** 		AT91C_BASE_AIC->AIC_SVR[i] = (uint32_t) default_isr;
 401              		.loc 1 124 17
 402 0100 70209FE5 		ldr	r2, .L22+36
 403              		.loc 1 124 32
 404 0104 70109FE5 		ldr	r1, .L22+40
 405              		.loc 1 124 30
 406 0108 0C301BE5 		ldr	r3, [fp, #-12]
 407 010c 203083E2 		add	r3, r3, #32
 408 0110 031182E7 		str	r1, [r2, r3, lsl #2]
 122:./lib/aic.c   **** 		AT91C_BASE_AIC->AIC_SMR[i] = AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | AIC_INT_LEVEL_LOWEST;
 409              		.loc 1 122 26 discriminator 3
 410 0114 0C301BE5 		ldr	r3, [fp, #-12]
 411 0118 013083E2 		add	r3, r3, #1
 412 011c 0C300BE5 		str	r3, [fp, #-12]
 413              	.L20:
 122:./lib/aic.c   **** 		AT91C_BASE_AIC->AIC_SMR[i] = AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | AIC_INT_LEVEL_LOWEST;
 414              		.loc 1 122 19 discriminator 1
 415 0120 0C301BE5 		ldr	r3, [fp, #-12]
 416 0124 1F0053E3 		cmp	r3, #31
 417 0128 F0FFFFDA 		ble	.L21
 418              	.LBE3:
 125:./lib/aic.c   **** 	}
 126:./lib/aic.c   **** 	/* Macht eigentlich  keinen Sinn, da der FIQ über eigenen 'PIN' reinkommt*/
 127:./lib/aic.c   **** 	AT91C_BASE_AIC->AIC_SVR[AT91C_ID_FIQ] = (uint32_t) default_fiq;
 419              		.loc 1 127 16
 420 012c 44309FE5 		ldr	r3, .L22+36
 421              		.loc 1 127 42
 422 0130 48209FE5 		ldr	r2, .L22+44
 423              		.loc 1 127 40
 424 0134 802083E5 		str	r2, [r3, #128]
 128:./lib/aic.c   **** 	AT91C_BASE_AIC->AIC_SPU               = (uint32_t) spurious_isr;
 425              		.loc 1 128 16
 426 0138 38309FE5 		ldr	r3, .L22+36
 427              		.loc 1 128 42
 428 013c 40209FE5 		ldr	r2, .L22+48
 429              		.loc 1 128 40
 430 0140 342183E5 		str	r2, [r3, #308]
 129:./lib/aic.c   **** }
 431              		.loc 1 129 1
 432 0144 0000A0E1 		nop
 433 0148 04D04BE2 		sub	sp, fp, #4
 434              		.cfi_def_cfa 13, 8
 435              		@ sp needed
 436 014c 0048BDE8 		pop	{fp, lr}
 437              		.cfi_restore 14
 438              		.cfi_restore 11
 439              		.cfi_def_cfa_offset 0
 440 0150 1EFF2FE1 		bx	lr
 441              	.L23:
 442              		.align	2
 443              	.L22:
 444 0154 00000000 		.word	aic
 445 0158 00000000 		.word	interrupts_get_and_disable
 446 015c 00000000 		.word	isr_undef
 447 0160 00000000 		.word	ivt_app
 448 0164 00000000 		.word	isr_swi
 449 0168 00000000 		.word	isr_pAbort
 450 016c 00000000 		.word	isr_dAbort
 451 0170 00000000 		.word	isr_irq
 452 0174 00000000 		.word	isr_fiq
 453 0178 00F0FFFF 		.word	-4096
 454 017c 00000000 		.word	default_isr
 455 0180 00000000 		.word	default_fiq
 456 0184 00000000 		.word	spurious_isr
 457              		.cfi_endproc
 458              	.LFE6:
 460              		.section	.text.aic_set_fiq,"ax",%progbits
 461              		.align	2
 462              		.global	aic_set_fiq
 463              		.syntax unified
 464              		.arm
 466              	aic_set_fiq:
 467              	.LFB7:
 130:./lib/aic.c   **** 
 131:./lib/aic.c   **** /* Register an fiq service routine */
 132:./lib/aic.c   **** /* NOTE: Do NOT enable interrupts throughout the whole FIQ processing. */
 133:./lib/aic.c   **** /* NOTE: FIQ ISR noch nicht getestet !!!!!!!! */
 134:./lib/aic.c   **** void aic_set_fiq(aic_cb_fcn isr)
 135:./lib/aic.c   **** {
 468              		.loc 1 135 1
 469              		.cfi_startproc
 470              		@ Function supports interworking.
 471              		@ args = 0, pretend = 0, frame = 8
 472              		@ frame_needed = 1, uses_anonymous_args = 0
 473              		@ link register save eliminated.
 474 0000 04B02DE5 		str	fp, [sp, #-4]!
 475              		.cfi_def_cfa_offset 4
 476              		.cfi_offset 11, -4
 477 0004 00B08DE2 		add	fp, sp, #0
 478              		.cfi_def_cfa_register 11
 479 0008 0CD04DE2 		sub	sp, sp, #12
 480 000c 08000BE5 		str	r0, [fp, #-8]
 136:./lib/aic.c   **** 	AT91C_BASE_AIC->AIC_SVR[AT91C_ID_FIQ] = (uint32_t) isr;
 481              		.loc 1 136 16
 482 0010 14209FE5 		ldr	r2, .L25
 483              		.loc 1 136 42
 484 0014 08301BE5 		ldr	r3, [fp, #-8]
 485              		.loc 1 136 40
 486 0018 803082E5 		str	r3, [r2, #128]
 137:./lib/aic.c   **** }
 487              		.loc 1 137 1
 488 001c 0000A0E1 		nop
 489 0020 00D08BE2 		add	sp, fp, #0
 490              		.cfi_def_cfa_register 13
 491              		@ sp needed
 492 0024 04B09DE4 		ldr	fp, [sp], #4
 493              		.cfi_restore 11
 494              		.cfi_def_cfa_offset 0
 495 0028 1EFF2FE1 		bx	lr
 496              	.L26:
 497              		.align	2
 498              	.L25:
 499 002c 00F0FFFF 		.word	-4096
 500              		.cfi_endproc
 501              	.LFE7:
 503              		.section	.text.aic_set_vector,"ax",%progbits
 504              		.align	2
 505              		.global	aic_set_vector
 506              		.syntax unified
 507              		.arm
 509              	aic_set_vector:
 510              	.LFB8:
 138:./lib/aic.c   **** 
 139:./lib/aic.c   **** /* Register an interrupt service routine for an interrupt line */
 140:./lib/aic.c   **** void aic_set_vector(uint32_t vector, uint32_t mode, aic_cb_fcn isr)
 141:./lib/aic.c   **** {
 511              		.loc 1 141 1
 512              		.cfi_startproc
 513              		@ Function supports interworking.
 514              		@ args = 0, pretend = 0, frame = 24
 515              		@ frame_needed = 1, uses_anonymous_args = 0
 516 0000 00482DE9 		push	{fp, lr}
 517              		.cfi_def_cfa_offset 8
 518              		.cfi_offset 11, -8
 519              		.cfi_offset 14, -4
 520 0004 04B08DE2 		add	fp, sp, #4
 521              		.cfi_def_cfa 11, 4
 522 0008 18D04DE2 		sub	sp, sp, #24
 523 000c 10000BE5 		str	r0, [fp, #-16]
 524 0010 14100BE5 		str	r1, [fp, #-20]
 525 0014 18200BE5 		str	r2, [fp, #-24]
 142:./lib/aic.c   **** 	if (vector < 32) {
 526              		.loc 1 142 5
 527 0018 10301BE5 		ldr	r3, [fp, #-16]
 528 001c 1F0053E3 		cmp	r3, #31
 529 0020 1200008A 		bhi	.L29
 530              	.LBB4:
 143:./lib/aic.c   **** 		int i_state = interrupts_get_and_disable();
 531              		.loc 1 143 17
 532 0024 54309FE5 		ldr	r3, .L30
 533 0028 0FE0A0E1 		mov	lr, pc
 534 002c 13FF2FE1 		bx	r3
 535              	.LVL12:
 536 0030 08000BE5 		str	r0, [fp, #-8]
 144:./lib/aic.c   **** 
 145:./lib/aic.c   **** 		AT91C_BASE_AIC->AIC_SMR[vector] = mode;
 537              		.loc 1 145 17
 538 0034 48109FE5 		ldr	r1, .L30+4
 539              		.loc 1 145 35
 540 0038 10301BE5 		ldr	r3, [fp, #-16]
 541 003c 14201BE5 		ldr	r2, [fp, #-20]
 542 0040 032181E7 		str	r2, [r1, r3, lsl #2]
 146:./lib/aic.c   **** 		AT91C_BASE_AIC->AIC_SVR[vector] = (uint32_t)isr;
 543              		.loc 1 146 17
 544 0044 38109FE5 		ldr	r1, .L30+4
 545              		.loc 1 146 37
 546 0048 18201BE5 		ldr	r2, [fp, #-24]
 547              		.loc 1 146 35
 548 004c 10301BE5 		ldr	r3, [fp, #-16]
 549 0050 203083E2 		add	r3, r3, #32
 550 0054 032181E7 		str	r2, [r1, r3, lsl #2]
 147:./lib/aic.c   **** 		
 148:./lib/aic.c   **** 		if(i_state)
 551              		.loc 1 148 5
 552 0058 08301BE5 		ldr	r3, [fp, #-8]
 553 005c 000053E3 		cmp	r3, #0
 554 0060 0200000A 		beq	.L29
 149:./lib/aic.c   **** 			interrupts_enable();
 555              		.loc 1 149 4
 556 0064 1C309FE5 		ldr	r3, .L30+8
 557 0068 0FE0A0E1 		mov	lr, pc
 558 006c 13FF2FE1 		bx	r3
 559              	.LVL13:
 560              	.L29:
 561              	.LBE4:
 150:./lib/aic.c   **** 	}
 151:./lib/aic.c   **** }
 562              		.loc 1 151 1
 563 0070 0000A0E1 		nop
 564 0074 04D04BE2 		sub	sp, fp, #4
 565              		.cfi_def_cfa 13, 8
 566              		@ sp needed
 567 0078 0048BDE8 		pop	{fp, lr}
 568              		.cfi_restore 14
 569              		.cfi_restore 11
 570              		.cfi_def_cfa_offset 0
 571 007c 1EFF2FE1 		bx	lr
 572              	.L31:
 573              		.align	2
 574              	.L30:
 575 0080 00000000 		.word	interrupts_get_and_disable
 576 0084 00F0FFFF 		.word	-4096
 577 0088 00000000 		.word	interrupts_enable
 578              		.cfi_endproc
 579              	.LFE8:
 581              		.section	.text.aic_mask_on,"ax",%progbits
 582              		.align	2
 583              		.global	aic_mask_on
 584              		.syntax unified
 585              		.arm
 587              	aic_mask_on:
 588              	.LFB9:
 152:./lib/aic.c   **** 
 153:./lib/aic.c   **** /* Enable handling of an interrupt line in the AIC */
 154:./lib/aic.c   **** void aic_mask_on(uint32_t vector)
 155:./lib/aic.c   **** {
 589              		.loc 1 155 1
 590              		.cfi_startproc
 591              		@ Function supports interworking.
 592              		@ args = 0, pretend = 0, frame = 16
 593              		@ frame_needed = 1, uses_anonymous_args = 0
 594 0000 00482DE9 		push	{fp, lr}
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 11, -8
 597              		.cfi_offset 14, -4
 598 0004 04B08DE2 		add	fp, sp, #4
 599              		.cfi_def_cfa 11, 4
 600 0008 10D04DE2 		sub	sp, sp, #16
 601 000c 10000BE5 		str	r0, [fp, #-16]
 156:./lib/aic.c   **** 	if (vector < 32) {
 602              		.loc 1 156 5
 603 0010 10301BE5 		ldr	r3, [fp, #-16]
 604 0014 1F0053E3 		cmp	r3, #31
 605 0018 0E00008A 		bhi	.L34
 606              	.LBB5:
 157:./lib/aic.c   **** 		int i_state = interrupts_get_and_disable();
 607              		.loc 1 157 17
 608 001c 44309FE5 		ldr	r3, .L35
 609 0020 0FE0A0E1 		mov	lr, pc
 610 0024 13FF2FE1 		bx	r3
 611              	.LVL14:
 612 0028 08000BE5 		str	r0, [fp, #-8]
 158:./lib/aic.c   **** 
 159:./lib/aic.c   **** 		AT91C_BASE_AIC->AIC_IECR = (1 << vector);
 613              		.loc 1 159 33
 614 002c 0120A0E3 		mov	r2, #1
 615 0030 10301BE5 		ldr	r3, [fp, #-16]
 616 0034 1223A0E1 		lsl	r2, r2, r3
 617              		.loc 1 159 17
 618 0038 2C309FE5 		ldr	r3, .L35+4
 619              		.loc 1 159 28
 620 003c 202183E5 		str	r2, [r3, #288]
 160:./lib/aic.c   **** 	
 161:./lib/aic.c   **** 		if(i_state)
 621              		.loc 1 161 5
 622 0040 08301BE5 		ldr	r3, [fp, #-8]
 623 0044 000053E3 		cmp	r3, #0
 624 0048 0200000A 		beq	.L34
 162:./lib/aic.c   **** 			interrupts_enable();
 625              		.loc 1 162 4
 626 004c 1C309FE5 		ldr	r3, .L35+8
 627 0050 0FE0A0E1 		mov	lr, pc
 628 0054 13FF2FE1 		bx	r3
 629              	.LVL15:
 630              	.L34:
 631              	.LBE5:
 163:./lib/aic.c   **** 	}
 164:./lib/aic.c   **** }
 632              		.loc 1 164 1
 633 0058 0000A0E1 		nop
 634 005c 04D04BE2 		sub	sp, fp, #4
 635              		.cfi_def_cfa 13, 8
 636              		@ sp needed
 637 0060 0048BDE8 		pop	{fp, lr}
 638              		.cfi_restore 14
 639              		.cfi_restore 11
 640              		.cfi_def_cfa_offset 0
 641 0064 1EFF2FE1 		bx	lr
 642              	.L36:
 643              		.align	2
 644              	.L35:
 645 0068 00000000 		.word	interrupts_get_and_disable
 646 006c 00F0FFFF 		.word	-4096
 647 0070 00000000 		.word	interrupts_enable
 648              		.cfi_endproc
 649              	.LFE9:
 651              		.section	.text.aic_mask_off,"ax",%progbits
 652              		.align	2
 653              		.global	aic_mask_off
 654              		.syntax unified
 655              		.arm
 657              	aic_mask_off:
 658              	.LFB10:
 165:./lib/aic.c   **** 
 166:./lib/aic.c   **** /* Disable handling of an interrupt line in the AIC */
 167:./lib/aic.c   **** void aic_mask_off(uint32_t vector)
 168:./lib/aic.c   **** {
 659              		.loc 1 168 1
 660              		.cfi_startproc
 661              		@ Function supports interworking.
 662              		@ args = 0, pretend = 0, frame = 16
 663              		@ frame_needed = 1, uses_anonymous_args = 0
 664 0000 00482DE9 		push	{fp, lr}
 665              		.cfi_def_cfa_offset 8
 666              		.cfi_offset 11, -8
 667              		.cfi_offset 14, -4
 668 0004 04B08DE2 		add	fp, sp, #4
 669              		.cfi_def_cfa 11, 4
 670 0008 10D04DE2 		sub	sp, sp, #16
 671 000c 10000BE5 		str	r0, [fp, #-16]
 169:./lib/aic.c   **** 	if (vector < 32) {
 672              		.loc 1 169 5
 673 0010 10301BE5 		ldr	r3, [fp, #-16]
 674 0014 1F0053E3 		cmp	r3, #31
 675 0018 0E00008A 		bhi	.L39
 676              	.LBB6:
 170:./lib/aic.c   **** 		int i_state = interrupts_get_and_disable();
 677              		.loc 1 170 17
 678 001c 44309FE5 		ldr	r3, .L40
 679 0020 0FE0A0E1 		mov	lr, pc
 680 0024 13FF2FE1 		bx	r3
 681              	.LVL16:
 682 0028 08000BE5 		str	r0, [fp, #-8]
 171:./lib/aic.c   **** 
 172:./lib/aic.c   **** 		AT91C_BASE_AIC->AIC_IDCR = (1 << vector);
 683              		.loc 1 172 33
 684 002c 0120A0E3 		mov	r2, #1
 685 0030 10301BE5 		ldr	r3, [fp, #-16]
 686 0034 1223A0E1 		lsl	r2, r2, r3
 687              		.loc 1 172 17
 688 0038 2C309FE5 		ldr	r3, .L40+4
 689              		.loc 1 172 28
 690 003c 242183E5 		str	r2, [r3, #292]
 173:./lib/aic.c   **** 		
 174:./lib/aic.c   **** 		if(i_state)
 691              		.loc 1 174 5
 692 0040 08301BE5 		ldr	r3, [fp, #-8]
 693 0044 000053E3 		cmp	r3, #0
 694 0048 0200000A 		beq	.L39
 175:./lib/aic.c   **** 			interrupts_enable();
 695              		.loc 1 175 4
 696 004c 1C309FE5 		ldr	r3, .L40+8
 697 0050 0FE0A0E1 		mov	lr, pc
 698 0054 13FF2FE1 		bx	r3
 699              	.LVL17:
 700              	.L39:
 701              	.LBE6:
 176:./lib/aic.c   **** 	}
 177:./lib/aic.c   **** }
 702              		.loc 1 177 1
 703 0058 0000A0E1 		nop
 704 005c 04D04BE2 		sub	sp, fp, #4
 705              		.cfi_def_cfa 13, 8
 706              		@ sp needed
 707 0060 0048BDE8 		pop	{fp, lr}
 708              		.cfi_restore 14
 709              		.cfi_restore 11
 710              		.cfi_def_cfa_offset 0
 711 0064 1EFF2FE1 		bx	lr
 712              	.L41:
 713              		.align	2
 714              	.L40:
 715 0068 00000000 		.word	interrupts_get_and_disable
 716 006c 00F0FFFF 		.word	-4096
 717 0070 00000000 		.word	interrupts_enable
 718              		.cfi_endproc
 719              	.LFE10:
 721              		.section	.text.aic_clear,"ax",%progbits
 722              		.align	2
 723              		.global	aic_clear
 724              		.syntax unified
 725              		.arm
 727              	aic_clear:
 728              	.LFB11:
 178:./lib/aic.c   **** 
 179:./lib/aic.c   **** /* Clear an interrupt line in the AIC */
 180:./lib/aic.c   **** void aic_clear(uint32_t vector)
 181:./lib/aic.c   **** {
 729              		.loc 1 181 1
 730              		.cfi_startproc
 731              		@ Function supports interworking.
 732              		@ args = 0, pretend = 0, frame = 16
 733              		@ frame_needed = 1, uses_anonymous_args = 0
 734 0000 00482DE9 		push	{fp, lr}
 735              		.cfi_def_cfa_offset 8
 736              		.cfi_offset 11, -8
 737              		.cfi_offset 14, -4
 738 0004 04B08DE2 		add	fp, sp, #4
 739              		.cfi_def_cfa 11, 4
 740 0008 10D04DE2 		sub	sp, sp, #16
 741 000c 10000BE5 		str	r0, [fp, #-16]
 182:./lib/aic.c   **** 	if (vector < 32) {
 742              		.loc 1 182 5
 743 0010 10301BE5 		ldr	r3, [fp, #-16]
 744 0014 1F0053E3 		cmp	r3, #31
 745 0018 0E00008A 		bhi	.L44
 746              	.LBB7:
 183:./lib/aic.c   **** 		int i_state = interrupts_get_and_disable();
 747              		.loc 1 183 17
 748 001c 44309FE5 		ldr	r3, .L45
 749 0020 0FE0A0E1 		mov	lr, pc
 750 0024 13FF2FE1 		bx	r3
 751              	.LVL18:
 752 0028 08000BE5 		str	r0, [fp, #-8]
 184:./lib/aic.c   **** 
 185:./lib/aic.c   **** 		AT91C_BASE_AIC->AIC_ICCR = (1 << vector);
 753              		.loc 1 185 33
 754 002c 0120A0E3 		mov	r2, #1
 755 0030 10301BE5 		ldr	r3, [fp, #-16]
 756 0034 1223A0E1 		lsl	r2, r2, r3
 757              		.loc 1 185 17
 758 0038 2C309FE5 		ldr	r3, .L45+4
 759              		.loc 1 185 28
 760 003c 282183E5 		str	r2, [r3, #296]
 186:./lib/aic.c   **** 		
 187:./lib/aic.c   **** 		if(i_state)
 761              		.loc 1 187 5
 762 0040 08301BE5 		ldr	r3, [fp, #-8]
 763 0044 000053E3 		cmp	r3, #0
 764 0048 0200000A 		beq	.L44
 188:./lib/aic.c   **** 			interrupts_enable();
 765              		.loc 1 188 4
 766 004c 1C309FE5 		ldr	r3, .L45+8
 767 0050 0FE0A0E1 		mov	lr, pc
 768 0054 13FF2FE1 		bx	r3
 769              	.LVL19:
 770              	.L44:
 771              	.LBE7:
 189:./lib/aic.c   **** 	}
 190:./lib/aic.c   **** }
 772              		.loc 1 190 1
 773 0058 0000A0E1 		nop
 774 005c 04D04BE2 		sub	sp, fp, #4
 775              		.cfi_def_cfa 13, 8
 776              		@ sp needed
 777 0060 0048BDE8 		pop	{fp, lr}
 778              		.cfi_restore 14
 779              		.cfi_restore 11
 780              		.cfi_def_cfa_offset 0
 781 0064 1EFF2FE1 		bx	lr
 782              	.L46:
 783              		.align	2
 784              	.L45:
 785 0068 00000000 		.word	interrupts_get_and_disable
 786 006c 00F0FFFF 		.word	-4096
 787 0070 00000000 		.word	interrupts_enable
 788              		.cfi_endproc
 789              	.LFE11:
 791              		.section	.text.aic_sys_register_commxx,"ax",%progbits
 792              		.align	2
 793              		.global	aic_sys_register_commxx
 794              		.syntax unified
 795              		.arm
 797              	aic_sys_register_commxx:
 798              	.LFB12:
 191:./lib/aic.c   **** 
 192:./lib/aic.c   **** /************************************************************/
 193:./lib/aic.c   **** void aic_sys_register_commxx(aic_cb_fcn fcn)
 194:./lib/aic.c   **** {
 799              		.loc 1 194 1
 800              		.cfi_startproc
 801              		@ Function supports interworking.
 802              		@ args = 0, pretend = 0, frame = 8
 803              		@ frame_needed = 1, uses_anonymous_args = 0
 804              		@ link register save eliminated.
 805 0000 04B02DE5 		str	fp, [sp, #-4]!
 806              		.cfi_def_cfa_offset 4
 807              		.cfi_offset 11, -4
 808 0004 00B08DE2 		add	fp, sp, #0
 809              		.cfi_def_cfa_register 11
 810 0008 0CD04DE2 		sub	sp, sp, #12
 811 000c 08000BE5 		str	r0, [fp, #-8]
 195:./lib/aic.c   **** 	aic.commxx_cb = fcn;
 812              		.loc 1 195 16
 813 0010 14209FE5 		ldr	r2, .L48
 814 0014 08301BE5 		ldr	r3, [fp, #-8]
 815 0018 043082E5 		str	r3, [r2, #4]
 196:./lib/aic.c   **** }
 816              		.loc 1 196 1
 817 001c 0000A0E1 		nop
 818 0020 00D08BE2 		add	sp, fp, #0
 819              		.cfi_def_cfa_register 13
 820              		@ sp needed
 821 0024 04B09DE4 		ldr	fp, [sp], #4
 822              		.cfi_restore 11
 823              		.cfi_def_cfa_offset 0
 824 0028 1EFF2FE1 		bx	lr
 825              	.L49:
 826              		.align	2
 827              	.L48:
 828 002c 00000000 		.word	aic
 829              		.cfi_endproc
 830              	.LFE12:
 832              		.section	.text.aic_sys_register_pit,"ax",%progbits
 833              		.align	2
 834              		.global	aic_sys_register_pit
 835              		.syntax unified
 836              		.arm
 838              	aic_sys_register_pit:
 839              	.LFB13:
 197:./lib/aic.c   **** 
 198:./lib/aic.c   **** void aic_sys_register_pit(aic_sys_vl_t *append,aic_cb_fcn fcn)
 199:./lib/aic.c   **** {
 840              		.loc 1 199 1
 841              		.cfi_startproc
 842              		@ Function supports interworking.
 843              		@ args = 0, pretend = 0, frame = 16
 844              		@ frame_needed = 1, uses_anonymous_args = 0
 845              		@ link register save eliminated.
 846 0000 04B02DE5 		str	fp, [sp, #-4]!
 847              		.cfi_def_cfa_offset 4
 848              		.cfi_offset 11, -4
 849 0004 00B08DE2 		add	fp, sp, #0
 850              		.cfi_def_cfa_register 11
 851 0008 14D04DE2 		sub	sp, sp, #20
 852 000c 10000BE5 		str	r0, [fp, #-16]
 853 0010 14100BE5 		str	r1, [fp, #-20]
 200:./lib/aic.c   **** 	aic_sys_vl_t *ptr;
 201:./lib/aic.c   **** 	
 202:./lib/aic.c   **** 	/* Ende der verketteten Liste suchen */
 203:./lib/aic.c   **** 	for(ptr=(aic_sys_vl_t *)&aic.sys_vl_head;
 854              		.loc 1 203 9
 855 0014 54309FE5 		ldr	r3, .L53
 856 0018 08300BE5 		str	r3, [fp, #-8]
 857              		.loc 1 203 2
 858 001c 020000EA 		b	.L51
 859              	.L52:
 204:./lib/aic.c   **** 	    ptr->next!=NULL;
 205:./lib/aic.c   **** 		ptr=ptr->next);
 860              		.loc 1 205 6
 861 0020 08301BE5 		ldr	r3, [fp, #-8]
 862 0024 003093E5 		ldr	r3, [r3]
 863 0028 08300BE5 		str	r3, [fp, #-8]
 864              	.L51:
 204:./lib/aic.c   **** 	    ptr->next!=NULL;
 865              		.loc 1 204 9
 866 002c 08301BE5 		ldr	r3, [fp, #-8]
 867 0030 003093E5 		ldr	r3, [r3]
 204:./lib/aic.c   **** 	    ptr->next!=NULL;
 868              		.loc 1 204 15
 869 0034 000053E3 		cmp	r3, #0
 870 0038 F8FFFF1A 		bne	.L52
 206:./lib/aic.c   **** 	
 207:./lib/aic.c   **** 	/* Neues Element initialisieren */
 208:./lib/aic.c   **** 	append->fcn =fcn;
 871              		.loc 1 208 14
 872 003c 10301BE5 		ldr	r3, [fp, #-16]
 873 0040 14201BE5 		ldr	r2, [fp, #-20]
 874 0044 042083E5 		str	r2, [r3, #4]
 209:./lib/aic.c   **** 	append->next=NULL;
 875              		.loc 1 209 14
 876 0048 10301BE5 		ldr	r3, [fp, #-16]
 877 004c 0020A0E3 		mov	r2, #0
 878 0050 002083E5 		str	r2, [r3]
 210:./lib/aic.c   **** 	
 211:./lib/aic.c   **** 	/* Neues Element am Ende anhängen */
 212:./lib/aic.c   **** 	ptr->next=append;
 879              		.loc 1 212 11
 880 0054 08301BE5 		ldr	r3, [fp, #-8]
 881 0058 10201BE5 		ldr	r2, [fp, #-16]
 882 005c 002083E5 		str	r2, [r3]
 213:./lib/aic.c   **** }
 883              		.loc 1 213 1
 884 0060 0000A0E1 		nop
 885 0064 00D08BE2 		add	sp, fp, #0
 886              		.cfi_def_cfa_register 13
 887              		@ sp needed
 888 0068 04B09DE4 		ldr	fp, [sp], #4
 889              		.cfi_restore 11
 890              		.cfi_def_cfa_offset 0
 891 006c 1EFF2FE1 		bx	lr
 892              	.L54:
 893              		.align	2
 894              	.L53:
 895 0070 00000000 		.word	aic
 896              		.cfi_endproc
 897              	.LFE13:
 899              		.section	.text.fastcode,"ax",%progbits
 900              		.align	2
 901              		.global	aic_sys_isr_entry
 902              		.syntax unified
 903              		.arm
 905              	aic_sys_isr_entry:
 906              	.LFB14:
 214:./lib/aic.c   **** 
 215:./lib/aic.c   **** __attribute__ ((section (".text.fastcode")))
 216:./lib/aic.c   **** void aic_sys_isr_entry(void)
 217:./lib/aic.c   **** {
 907              		.loc 1 217 1
 908              		.cfi_startproc
 909              		@ Function supports interworking.
 910              		@ args = 0, pretend = 0, frame = 8
 911              		@ frame_needed = 1, uses_anonymous_args = 0
 912 0000 00482DE9 		push	{fp, lr}
 913              		.cfi_def_cfa_offset 8
 914              		.cfi_offset 11, -8
 915              		.cfi_offset 14, -4
 916 0004 04B08DE2 		add	fp, sp, #4
 917              		.cfi_def_cfa 11, 4
 918 0008 08D04DE2 		sub	sp, sp, #8
 218:./lib/aic.c   **** 	//Der System-Interrupt ergibt sich aus der Verorderung von
 219:./lib/aic.c   **** 	// - PIT
 220:./lib/aic.c   **** 	// - RTT (Real Time Timer)
 221:./lib/aic.c   **** 	// - WDT (Watchdog)
 222:./lib/aic.c   **** 	// - DBGU (Debug Unit)
 223:./lib/aic.c   **** 	// - PMC (Power Management Controller)
 224:./lib/aic.c   **** 	// - RSTC (Reset Controller)
 225:./lib/aic.c   **** 	
 226:./lib/aic.c   **** 	if(*AT91C_PITC_PISR & AT91C_PITC_PITS) {
 919              		.loc 1 226 5
 920 000c 90309FE5 		ldr	r3, .L61
 921 0010 003093E5 		ldr	r3, [r3]
 922              		.loc 1 226 22
 923 0014 013003E2 		and	r3, r3, #1
 924              		.loc 1 226 4
 925 0018 000053E3 		cmp	r3, #0
 926 001c 0D00000A 		beq	.L56
 927              	.LBB8:
 227:./lib/aic.c   **** 		aic_sys_vl_t *ptr;
 228:./lib/aic.c   **** 		//Callback Funktionen aufrufen
 229:./lib/aic.c   **** 		//Interruptquelle (PIVR) muss in einer der Callback Routinen zurückgesetzt werden!
 230:./lib/aic.c   **** 		for(ptr=(aic_sys_vl_t *)aic.sys_vl_head;
 928              		.loc 1 230 10
 929 0020 80309FE5 		ldr	r3, .L61+4
 930 0024 003093E5 		ldr	r3, [r3]
 931 0028 08300BE5 		str	r3, [fp, #-8]
 932              		.loc 1 230 3
 933 002c 060000EA 		b	.L57
 934              	.L58:
 231:./lib/aic.c   **** 			ptr!=NULL;
 232:./lib/aic.c   **** 			ptr=ptr->next)
 233:./lib/aic.c   **** 			ptr->fcn();
 935              		.loc 1 233 7
 936 0030 08301BE5 		ldr	r3, [fp, #-8]
 937 0034 043093E5 		ldr	r3, [r3, #4]
 938              		.loc 1 233 4
 939 0038 0FE0A0E1 		mov	lr, pc
 940 003c 13FF2FE1 		bx	r3
 941              	.LVL20:
 232:./lib/aic.c   **** 			ptr->fcn();
 942              		.loc 1 232 7
 943 0040 08301BE5 		ldr	r3, [fp, #-8]
 944 0044 003093E5 		ldr	r3, [r3]
 945 0048 08300BE5 		str	r3, [fp, #-8]
 946              	.L57:
 231:./lib/aic.c   **** 			ptr!=NULL;
 947              		.loc 1 231 7
 948 004c 08301BE5 		ldr	r3, [fp, #-8]
 949 0050 000053E3 		cmp	r3, #0
 950 0054 F5FFFF1A 		bne	.L58
 951              	.L56:
 952              	.LBE8:
 234:./lib/aic.c   **** 	}
 235:./lib/aic.c   **** //	if(*AT91C_RTTC_RTSR & (AT91C_RTTC_ALMS | AT91C_RTTC_RTTINC)) {
 236:./lib/aic.c   **** //	}
 237:./lib/aic.c   **** //  if(*AT91C_WDTC_WDSR & (AT91C_WDTC_WDUNF | AT91C_WDTC_WDERR)) {
 238:./lib/aic.c   **** //  }
 239:./lib/aic.c   **** 	if((aic.commxx_cb) && (*AT91C_DBGU_CSR & *AT91C_DBGU_IMR & (AT91C_US_COMM_TX | AT91C_US_COMM_RX)))
 953              		.loc 1 239 9
 954 0058 48309FE5 		ldr	r3, .L61+4
 955 005c 043093E5 		ldr	r3, [r3, #4]
 956              		.loc 1 239 4
 957 0060 000053E3 		cmp	r3, #0
 958 0064 0A00000A 		beq	.L60
 959              		.loc 1 239 25 discriminator 1
 960 0068 3C309FE5 		ldr	r3, .L61+8
 961 006c 002093E5 		ldr	r2, [r3]
 962              		.loc 1 239 43 discriminator 1
 963 0070 38309FE5 		ldr	r3, .L61+12
 964 0074 003093E5 		ldr	r3, [r3]
 965              		.loc 1 239 41 discriminator 1
 966 0078 023003E0 		and	r3, r3, r2
 967              		.loc 1 239 21 discriminator 1
 968 007c 070173E3 		cmn	r3, #-1073741823
 969 0080 0300009A 		bls	.L60
 240:./lib/aic.c   **** 		aic.commxx_cb();
 970              		.loc 1 240 6
 971 0084 1C309FE5 		ldr	r3, .L61+4
 972 0088 043093E5 		ldr	r3, [r3, #4]
 973              		.loc 1 240 3
 974 008c 0FE0A0E1 		mov	lr, pc
 975 0090 13FF2FE1 		bx	r3
 976              	.LVL21:
 977              	.L60:
 241:./lib/aic.c   **** //  if(*AT91C_DBGU_CSR & ()) {
 242:./lib/aic.c   **** //  }
 243:./lib/aic.c   **** //  if(*AT91C_PMC_SR & ()) {
 244:./lib/aic.c   **** //  }	
 245:./lib/aic.c   **** //  if(*AT91C_RSTC_RSR & ()) {
 246:./lib/aic.c   **** //  }	
 247:./lib/aic.c   **** }
 978              		.loc 1 247 1
 979 0094 0000A0E1 		nop
 980 0098 04D04BE2 		sub	sp, fp, #4
 981              		.cfi_def_cfa 13, 8
 982              		@ sp needed
 983 009c 0048BDE8 		pop	{fp, lr}
 984              		.cfi_restore 14
 985              		.cfi_restore 11
 986              		.cfi_def_cfa_offset 0
 987 00a0 1EFF2FE1 		bx	lr
 988              	.L62:
 989              		.align	2
 990              	.L61:
 991 00a4 34FDFFFF 		.word	-716
 992 00a8 00000000 		.word	aic
 993 00ac 14F2FFFF 		.word	-3564
 994 00b0 10F2FFFF 		.word	-3568
 995              		.cfi_endproc
 996              	.LFE14:
 998              		.section	.text.aic_sys_init,"ax",%progbits
 999              		.align	2
 1000              		.global	aic_sys_init
 1001              		.syntax unified
 1002              		.arm
 1004              	aic_sys_init:
 1005              	.LFB15:
 248:./lib/aic.c   **** 
 249:./lib/aic.c   **** void aic_sys_init(uint32_t srctype,uint32_t level)
 250:./lib/aic.c   **** {
 1006              		.loc 1 250 1
 1007              		.cfi_startproc
 1008              		@ Function supports interworking.
 1009              		@ args = 0, pretend = 0, frame = 16
 1010              		@ frame_needed = 1, uses_anonymous_args = 0
 1011 0000 00482DE9 		push	{fp, lr}
 1012              		.cfi_def_cfa_offset 8
 1013              		.cfi_offset 11, -8
 1014              		.cfi_offset 14, -4
 1015 0004 04B08DE2 		add	fp, sp, #4
 1016              		.cfi_def_cfa 11, 4
 1017 0008 10D04DE2 		sub	sp, sp, #16
 1018 000c 10000BE5 		str	r0, [fp, #-16]
 1019 0010 14100BE5 		str	r1, [fp, #-20]
 251:./lib/aic.c   **** 	int i_state = interrupts_get_and_disable();
 1020              		.loc 1 251 16
 1021 0014 84309FE5 		ldr	r3, .L66
 1022 0018 0FE0A0E1 		mov	lr, pc
 1023 001c 13FF2FE1 		bx	r3
 1024              	.LVL22:
 1025 0020 08000BE5 		str	r0, [fp, #-8]
 252:./lib/aic.c   **** 
 253:./lib/aic.c   **** 	//Flankengesteuert funktioniert bei SYS nicht, da mehrere Quellen das FF setzen.
 254:./lib/aic.c   **** 	aic_mask_off  (AT91C_ID_SYS);
 1026              		.loc 1 254 2
 1027 0024 0100A0E3 		mov	r0, #1
 1028 0028 74309FE5 		ldr	r3, .L66+4
 1029 002c 0FE0A0E1 		mov	lr, pc
 1030 0030 13FF2FE1 		bx	r3
 1031              	.LVL23:
 255:./lib/aic.c   **** 	aic_set_vector(AT91C_ID_SYS, srctype |  level, aic_sys_isr_entry);
 1032              		.loc 1 255 2
 1033 0034 10201BE5 		ldr	r2, [fp, #-16]
 1034 0038 14301BE5 		ldr	r3, [fp, #-20]
 1035 003c 033082E1 		orr	r3, r2, r3
 1036 0040 60209FE5 		ldr	r2, .L66+8
 1037 0044 0310A0E1 		mov	r1, r3
 1038 0048 0100A0E3 		mov	r0, #1
 1039 004c 58309FE5 		ldr	r3, .L66+12
 1040 0050 0FE0A0E1 		mov	lr, pc
 1041 0054 13FF2FE1 		bx	r3
 1042              	.LVL24:
 256:./lib/aic.c   **** 	aic_clear     (AT91C_ID_SYS);
 1043              		.loc 1 256 2
 1044 0058 0100A0E3 		mov	r0, #1
 1045 005c 4C309FE5 		ldr	r3, .L66+16
 1046 0060 0FE0A0E1 		mov	lr, pc
 1047 0064 13FF2FE1 		bx	r3
 1048              	.LVL25:
 257:./lib/aic.c   **** 	aic_mask_on   (AT91C_ID_SYS);
 1049              		.loc 1 257 2
 1050 0068 0100A0E3 		mov	r0, #1
 1051 006c 40309FE5 		ldr	r3, .L66+20
 1052 0070 0FE0A0E1 		mov	lr, pc
 1053 0074 13FF2FE1 		bx	r3
 1054              	.LVL26:
 258:./lib/aic.c   **** 	
 259:./lib/aic.c   **** 	if (i_state)
 1055              		.loc 1 259 5
 1056 0078 08301BE5 		ldr	r3, [fp, #-8]
 1057 007c 000053E3 		cmp	r3, #0
 1058 0080 0200000A 		beq	.L65
 260:./lib/aic.c   **** 		interrupts_enable();
 1059              		.loc 1 260 3
 1060 0084 2C309FE5 		ldr	r3, .L66+24
 1061 0088 0FE0A0E1 		mov	lr, pc
 1062 008c 13FF2FE1 		bx	r3
 1063              	.LVL27:
 1064              	.L65:
 261:./lib/aic.c   **** }
 1065              		.loc 1 261 1
 1066 0090 0000A0E1 		nop
 1067 0094 04D04BE2 		sub	sp, fp, #4
 1068              		.cfi_def_cfa 13, 8
 1069              		@ sp needed
 1070 0098 0048BDE8 		pop	{fp, lr}
 1071              		.cfi_restore 14
 1072              		.cfi_restore 11
 1073              		.cfi_def_cfa_offset 0
 1074 009c 1EFF2FE1 		bx	lr
 1075              	.L67:
 1076              		.align	2
 1077              	.L66:
 1078 00a0 00000000 		.word	interrupts_get_and_disable
 1079 00a4 00000000 		.word	aic_mask_off
 1080 00a8 00000000 		.word	aic_sys_isr_entry
 1081 00ac 00000000 		.word	aic_set_vector
 1082 00b0 00000000 		.word	aic_clear
 1083 00b4 00000000 		.word	aic_mask_on
 1084 00b8 00000000 		.word	interrupts_enable
 1085              		.cfi_endproc
 1086              	.LFE15:
 1088              		.text
 1089              	.Letext0:
 1090              		.file 2 "/usr/lib/gcc/arm-gnu-toolchain-14.3.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/machi
 1091              		.file 3 "./lib/../AT91SAM7S64.h"
 1092              		.file 4 "/usr/lib/gcc/arm-gnu-toolchain-14.3.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/sys/_
 1093              		.file 5 "./lib/../main.h"
 1094              		.file 6 "./lib/aic.h"
 1095              		.file 7 "./lib/isr.h"
 1096              		.file 8 "./lib/term.h"
DEFINED SYMBOLS
                            *ABS*:00000000 aic.c
     /tmp/cc2zx8CN.s:22     .bss:00000000 aic_intNest
     /tmp/cc2zx8CN.s:23     .bss:00000000 $d
     /tmp/cc2zx8CN.s:27     .bss:00000001 aic_intMax
     /tmp/cc2zx8CN.s:33     .bss:00000004 aic
     /tmp/cc2zx8CN.s:36     .rodata:00000000 $d
     /tmp/cc2zx8CN.s:46     .text.Q_onAssert:00000000 $a
     /tmp/cc2zx8CN.s:51     .text.Q_onAssert:00000000 Q_onAssert
     /tmp/cc2zx8CN.s:130    .text.Q_onAssert:000000c0 $d
     /tmp/cc2zx8CN.s:144    .text.default_isr:00000000 $a
     /tmp/cc2zx8CN.s:149    .text.default_isr:00000000 default_isr
     /tmp/cc2zx8CN.s:181    .text.default_isr:00000030 $d
     /tmp/cc2zx8CN.s:192    .text.default_fiq:00000000 $a
     /tmp/cc2zx8CN.s:197    .text.default_fiq:00000000 default_fiq
     /tmp/cc2zx8CN.s:229    .text.default_fiq:00000030 $d
     /tmp/cc2zx8CN.s:236    .text.spurious_isr:00000000 $a
     /tmp/cc2zx8CN.s:241    .text.spurious_isr:00000000 spurious_isr
     /tmp/cc2zx8CN.s:275    .text.spurious_isr:00000034 $d
     /tmp/cc2zx8CN.s:280    .text.aic_init:00000000 $a
     /tmp/cc2zx8CN.s:285    .text.aic_init:00000000 aic_init
     /tmp/cc2zx8CN.s:444    .text.aic_init:00000154 $d
     /tmp/cc2zx8CN.s:461    .text.aic_set_fiq:00000000 $a
     /tmp/cc2zx8CN.s:466    .text.aic_set_fiq:00000000 aic_set_fiq
     /tmp/cc2zx8CN.s:499    .text.aic_set_fiq:0000002c $d
     /tmp/cc2zx8CN.s:504    .text.aic_set_vector:00000000 $a
     /tmp/cc2zx8CN.s:509    .text.aic_set_vector:00000000 aic_set_vector
     /tmp/cc2zx8CN.s:575    .text.aic_set_vector:00000080 $d
     /tmp/cc2zx8CN.s:582    .text.aic_mask_on:00000000 $a
     /tmp/cc2zx8CN.s:587    .text.aic_mask_on:00000000 aic_mask_on
     /tmp/cc2zx8CN.s:645    .text.aic_mask_on:00000068 $d
     /tmp/cc2zx8CN.s:652    .text.aic_mask_off:00000000 $a
     /tmp/cc2zx8CN.s:657    .text.aic_mask_off:00000000 aic_mask_off
     /tmp/cc2zx8CN.s:715    .text.aic_mask_off:00000068 $d
     /tmp/cc2zx8CN.s:722    .text.aic_clear:00000000 $a
     /tmp/cc2zx8CN.s:727    .text.aic_clear:00000000 aic_clear
     /tmp/cc2zx8CN.s:785    .text.aic_clear:00000068 $d
     /tmp/cc2zx8CN.s:792    .text.aic_sys_register_commxx:00000000 $a
     /tmp/cc2zx8CN.s:797    .text.aic_sys_register_commxx:00000000 aic_sys_register_commxx
     /tmp/cc2zx8CN.s:828    .text.aic_sys_register_commxx:0000002c $d
     /tmp/cc2zx8CN.s:833    .text.aic_sys_register_pit:00000000 $a
     /tmp/cc2zx8CN.s:838    .text.aic_sys_register_pit:00000000 aic_sys_register_pit
     /tmp/cc2zx8CN.s:895    .text.aic_sys_register_pit:00000070 $d
     /tmp/cc2zx8CN.s:900    .text.fastcode:00000000 $a
     /tmp/cc2zx8CN.s:905    .text.fastcode:00000000 aic_sys_isr_entry
     /tmp/cc2zx8CN.s:991    .text.fastcode:000000a4 $d
     /tmp/cc2zx8CN.s:999    .text.aic_sys_init:00000000 $a
     /tmp/cc2zx8CN.s:1004   .text.aic_sys_init:00000000 aic_sys_init
     /tmp/cc2zx8CN.s:1078   .text.aic_sys_init:000000a0 $d

UNDEFINED SYMBOLS
interrupts_enable
term_string
term_hex
interrupts_get_and_disable
isr_undef
ivt_app
isr_swi
isr_pAbort
isr_dAbort
isr_irq
isr_fiq
